<?xml version="1.0" encoding="UTF-8"?>
<definitions name="RpcLiteralService" targetNamespace="http://foo.bar/rpcliteralservice"
             xmlns:tns="http://foo.bar/rpcliteralservice" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
             xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
             xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns="http://schemas.xmlsoap.org/wsdl/"
             xmlns:ns="http://foo.bar/rpcliteralservice/types">
    <types>
        <xsd:schema targetNamespace="http://foo.bar/rpcliteralservice/types"
                    xmlns="http://foo.bar/rpcliteralservice/types">
            <xsd:complexType name="ArrayOfNumbers">
                <xsd:complexContent>
                    <xsd:restriction base="soapenc:Array">
                        <xsd:attribute ref="soapenc:arrayType" soap:arrayType="xsd:int[]"/>
                    </xsd:restriction>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:complexType name="ArrayOfNumbersWithPrefix">
                <xsd:complexContent>
                    <xsd:restriction base="soapenc:Array">
                        <xsd:attribute ref="soapenc:arrayType" soap:arrayType="xsd:string[]"/>
                    </xsd:restriction>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:element name="User" nillable="true" type="ns:User"/>
            <xsd:complexType name="User">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string"/>
                    <xsd:element name="age" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="UserContext" nillable="true" type="ns:UserContext"/>
            <xsd:complexType name="UserContext">
                <xsd:sequence>
                    <xsd:element name="id" type="xsd:int"/>
                    <xsd:element name="userInfo" element="ns:UserInfo"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="UserInfo" nillable="true" type="ns:UserInfo"/>
            <xsd:complexType name="UserInfo">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string"/>
                    <xsd:element name="age" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ArrayOfCompanies">
                <xsd:complexContent>
                    <xsd:restriction base="soapenc:Array">
                        <xsd:attribute ref="soapenc:arrayType" soap:arrayType="ns:Company[]"/>
                    </xsd:restriction>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:element name="Company" nillable="true" type="ns:Company"/>
            <xsd:complexType name="Company">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string"/>
                    <xsd:element name="postcode" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ArrayOfCompaniesNames">
                <xsd:complexContent>
                    <xsd:restriction base="soapenc:Array">
                        <xsd:attribute ref="soapenc:arrayType" soap:arrayType="xsd:string[]"/>
                    </xsd:restriction>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:complexType name="ArrayOfErrors">
                <xsd:complexContent>
                    <xsd:restriction base="soapenc:Array">
                        <xsd:attribute ref="soapenc:arrayType" soap:arrayType="xsd:string[]"/>
                    </xsd:restriction>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:element name="Result" nillable="true" type="ns:Result"/>
            <xsd:complexType name="Result">
                <xsd:sequence>
                    <xsd:element name="result" type="xsd:boolean"/>
                    <xsd:element name="errors" type="ns:ArrayOfErrors"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="ArrayOfErrors">
                <xsd:complexContent>
                    <xsd:restriction base="soapenc:Array">
                        <xsd:attribute ref="soapenc:arrayType" soap:arrayType="xsd:string[]"/>
                    </xsd:restriction>
                </xsd:complexContent>
            </xsd:complexType>
            <xsd:element name="ServiceAuth" nillable="true" type="ns:ServiceAuth"/>
            <xsd:complexType name="ServiceAuth">
                <xsd:sequence>
                    <xsd:element name="token" type="xsd:string"/>
                    <xsd:element name="id" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:schema>
    </types>
    <message name="uppercaseUserNameRequest">
        <part name="userName" type="xsd:string"/>
    </message>
    <message name="uppercaseUserNameResponse">
        <part name="uppercasedUserName" type="xsd:string"/>
    </message>
    <message name="appendPrefixToNumbersRequest">
        <part name="numbers" type="ns:ArrayOfNumbers"/>
        <part name="prefix" type="xsd:string"/>
    </message>
    <message name="appendPrefixToNumbersResponse">
        <part name="numbersWithPrefix" type="ns:ArrayOfNumbersWithPrefix"/>
    </message>
    <message name="getUserContextRequest">
        <part name="user" element="ns:User"/>
    </message>
    <message name="getUserContextResponse">
        <part name="userContext" element="ns:UserContext"/>
    </message>
    <message name="extractCompaniesNamesRequest">
        <part name="companies" type="ns:ArrayOfCompanies"/>
    </message>
    <message name="extractCompaniesNamesResponse">
        <part name="companiesNames" type="ns:ArrayOfCompaniesNames"/>
    </message>
    <message name="wrapErrorsRequest">
        <part name="errors" type="ns:ArrayOfErrors"/>
    </message>
    <message name="wrapErrorsResponse">
        <part name="result" element="ns:Result"/>
    </message>
    <message name="authorizedMethodRequestHeader">
        <part name="serviceAuth" element="ns:ServiceAuth"/>
    </message>
    <message name="authorizedMethodRequest">
        <part name="name" type="xsd:string"/>
        <part name="surname" type="xsd:string"/>
    </message>
    <message name="authorizedMethodResponse">
        <part name="nameWithSurname" type="xsd:string"/>
    </message>
    <message name="methodWithoutReturnRequest">
        <part name="userToken" type="xsd:string"/>
    </message>
    <message name="methodWithoutReturnResponse"/>
    <message name="methodWithoutParametersRequest"/>
    <message name="methodWithoutParametersResponse">
        <part name="responseForMethodWithoutParameters" type="xsd:string"/>
    </message>
    <portType name="RpcLiteralServicePortType">
        <operation name="uppercaseUserName">
            <input message="tns:uppercaseUserNameRequest"/>
            <output message="tns:uppercaseUserNameResponse"/>
        </operation>
        <operation name="appendPrefixToNumbers">
            <input message="tns:appendPrefixToNumbersRequest"/>
            <output message="tns:appendPrefixToNumbersResponse"/>
        </operation>
        <operation name="getUserContext">
            <input message="tns:getUserContextRequest"/>
            <output message="tns:getUserContextResponse"/>
        </operation>
        <operation name="extractCompaniesNames">
            <input message="tns:extractCompaniesNamesRequest"/>
            <output message="tns:extractCompaniesNamesResponse"/>
        </operation>
        <operation name="wrapErrors">
            <input message="tns:wrapErrorsRequest"/>
            <output message="tns:wrapErrorsResponse"/>
        </operation>
        <operation name="authorizedMethod">
            <input message="tns:authorizedMethodRequest"/>
            <output message="tns:authorizedMethodResponse"/>
        </operation>
        <operation name="methodWithoutReturn">
            <input message="tns:methodWithoutReturnRequest"/>
            <output message="tns:methodWithoutReturnResponse"/>
        </operation>
        <operation name="methodWithoutParameters">
            <input message="tns:methodWithoutParametersRequest"/>
            <output message="tns:methodWithoutParametersResponse"/>
        </operation>
    </portType>
    <binding name="RpcLiteralServiceBinding" type="tns:RpcLiteralServicePortType">
        <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="uppercaseUserName">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#uppercaseUserName"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="appendPrefixToNumbers">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#appendPrefixToNumbers"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="getUserContext">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#getUserContext"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="extractCompaniesNames">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#extractCompaniesNames"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="wrapErrors">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#wrapErrors"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="authorizedMethod">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#authorizedMethod"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
                <soap:header use="literal" namespace="http://foo.bar/rpcliteralservice" part="serviceAuth"
                             message="tns:authorizedMethodRequestHeader"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="methodWithoutReturn">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#methodWithoutReturn"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
        <operation name="methodWithoutParameters">
            <soap:operation soapAction="http://foo.bar/rpcliteralservice/#methodWithoutParameters"/>
            <input>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </input>
            <output>
                <soap:body use="literal" namespace="http://foo.bar/rpcliteralservice"/>
            </output>
        </operation>
    </binding>
    <service name="RpcLiteralServiceService">
        <port name="ChangedRpcLiteralServicePort" binding="tns:RpcLiteralServiceBinding">
            <soap:address location="http://localhost:7777/wsdl-creator/examples/rpc_literal/service.php"/>
        </port>
    </service>
</definitions>
